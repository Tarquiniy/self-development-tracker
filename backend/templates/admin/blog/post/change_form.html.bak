{% extends "admin/change_form.html" %}
{% load static i18n %}

{% block extrahead %}
  {{ block.super }}
  <link rel="stylesheet" href="{% static 'admin/css/admin-post-form.css' %}">
  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/@tiptap/core@2.0.0-beta.153/dist/tiptap-core.umd.min.js"></script>
  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/@tiptap/starter-kit@2.0.0-beta.143/dist/tiptap-starter-kit.umd.min.js"></script>
  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/@tiptap/extension-image@2.0.0-beta.37/dist/tiptap-extension-image.umd.min.js"></script>
  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/@tiptap/extension-link@2.0.0-beta.37/dist/tiptap-extension-link.umd.min.js"></script>
  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/@tiptap/extension-code-block-lowlight@2.0.0-beta.19/dist/tiptap-extension-code-block-lowlight.umd.min.js"></script>
  <script src="{% static 'admin/vendor/tiptap/tiptap-umd.js' %}"></script>
<script src="{% static 'admin/js/sdr_tiptap_admin_extra.js' %}"></script>
<link rel="stylesheet" href="{% static 'admin/css/sdr_tiptap_admin.css' %}">

  <style>
    .tiptap-editor-container { border: 1px solid #e6edf3; border-radius: 6px; padding: 12px; min-height: 240px; background: #fff; }
    .tiptap-toolbar { margin-bottom: 8px; }
    .admin-media-btn { margin-left: .5rem; }
    textarea[name="content"] { min-height: 220px; }
  </style>
{% endblock %}

{% block submit_buttons_top %}
  {{ block.super }}
  <a href="{% url 'admin-media-library' %}" class="button admin-media-btn" onclick="openMediaLibrary(event)">
    {% trans "Медиа библиотека" %}
  </a>
{% endblock %}

{% block content %}
  {{ block.super }}

  <script>
  (function () {
    function qs(sel, root) { root = root || document; return root.querySelector(sel); }

    window.openMediaLibrary = function (e) {
      try {
        if (e && e.preventDefault) e.preventDefault();
        var url = "{% url 'admin-media-library' %}";
        window.open(url, "media_library", "width=1000,height=700,scrollbars=yes");
      } catch (err) {
        console.error('openMediaLibrary error', err);
        alert("{% trans 'Не удалось открыть медиа библиотеку' %}");
      }
      return false;
    };

    window.__insertMediaToEditor = function (url) {
      try {
        var feat = qs('input[name="featured_image"]');
        if (feat) { feat.value = url; }
        var container = qs('.tiptap-editor-container');
        if (container && container._tiptap_editor) {
          try {
            var editor = container._tiptap_editor;
            if (editor && editor.chain) {
              editor.chain().focus().setImage({ src: url }).run();
              return true;
            }
          } catch (e) { }
        }
        var ta = qs('textarea[name="content"]');
        if (ta) {
          ta.value = (ta.value || '') + "\n<img src='" + url + "' alt='' />\n";
          return true;
        }
        return false;
      } catch (err) {
        console.error('insertMediaToEditor error', err);
        return false;
      }
    };

    window.initAdminTipTap = function () {
      try {
        var textarea = qs('textarea[name="content"]');
        if (!textarea) return;
        if (textarea.dataset.tiptapInitialized) return;
        textarea.dataset.tiptapInitialized = '1';
        textarea.style.display = 'none';
        var wrapper = document.createElement('div');
        wrapper.className = 'tiptap-editor-wrapper';
        var toolbar = document.createElement('div');
        toolbar.className = 'tiptap-toolbar';
        var editorContainer = document.createElement('div');
        editorContainer.className = 'tiptap-editor-container';
        wrapper.appendChild(toolbar);
        wrapper.appendChild(editorContainer);
        textarea.parentNode.insertBefore(wrapper, textarea.nextSibling);

        var contentJson = qs('input[name="content_json"]');
        if (!contentJson) {
          contentJson = document.createElement('input');
          contentJson.type = 'hidden';
          contentJson.name = 'content_json';
          textarea.parentNode.insertBefore(contentJson, wrapper.nextSibling);
        }

        var TipTapCore = window['@tiptap/core'] || window.tiptapCore || window.tiptap || null;
        var StarterKit = window['@tiptap/starter-kit'] || window.tiptapStarterKit || null;
        var Editor = null, Starter = null;
        try {
          if (TipTapCore && (TipTapCore.Editor || (TipTapCore.default && TipTapCore.default.Editor))) {
            Editor = TipTapCore.Editor || (TipTapCore.default && TipTapCore.default.Editor);
          }
          if (StarterKit && (StarterKit.StarterKit || StarterKit.default || typeof StarterKit === 'function')) {
            Starter = StarterKit.StarterKit || StarterKit.default || StarterKit;
          }
        } catch (e) {}

        if (!Editor || !Starter) {
          console.warn('TipTap not available — falling back to simple contentEditable');
          textarea.style.display = '';
          try {
            var fallback = document.createElement('div');
            fallback.className = 'tiptap-fallback';
            fallback.contentEditable = true;
            fallback.innerHTML = textarea.value || '';
            fallback.addEventListener('input', function () { textarea.value = fallback.innerHTML; });
            editorContainer.appendChild(fallback);
          } catch (err) { console.error('fallback editor init failed', err); }
          return;
        }

        var extensions = [];
        try {
          var ImgExt = window['@tiptap/extension-image'] || window.tiptapImage || null;
          if (ImgExt && (ImgExt.Image || ImgExt.default || typeof ImgExt === 'function')) {
            extensions.push(ImgExt.Image || ImgExt.default || ImgExt);
          }
        } catch (e) {}
        try {
          var LinkExt = window['@tiptap/extension-link'] || window.tiptapLink || null;
          if (LinkExt && (LinkExt.Link || LinkExt.default || typeof LinkExt === 'function')) {
            extensions.push(LinkExt.Link || LinkExt.default || LinkExt);
          }
        } catch (e) {}

        var editor = null;
        try {
          editor = new Editor({
            element: editorContainer,
            extensions: [ (Starter.configure ? Starter.configure() : Starter) ].concat(extensions),
            content: textarea.value || '',
            onUpdate: function (props) {
              try {
                if (props && props.editor && typeof props.editor.getHTML === 'function') {
                  editorContainer._current_html = props.editor.getHTML();
                }
              } catch (e) { }
            }
          });
          editorContainer._tiptap_editor = editor;
        } catch (err) {
          console.error('Failed to instantiate TipTap editor', err);
          textarea.style.display = '';
          return;
        }

        function makeBtn(label, onClick) {
          var b = document.createElement('button');
          b.type = 'button';
          b.className = 'button';
          b.style.marginRight = '6px';
          b.textContent = label;
          b.addEventListener('click', onClick);
          toolbar.appendChild(b);
          return b;
        }

        makeBtn('B', function () { try { editor.chain().focus().toggleBold().run(); } catch (e) {} });
        makeBtn('I', function () { try { editor.chain().focus().toggleItalic().run(); } catch (e) {} });
        makeBtn('H2', function () { try { editor.chain().focus().toggleHeading({ level: 2 }).run(); } catch (e) {} });
        makeBtn('{code}', function () { try { editor.chain().focus().toggleCodeBlock().run(); } catch (e) {} });
        makeBtn('Image', function () { openMediaLibrary(); });
        makeBtn('Preview', function () {
          try {
            var w = window.open('', '_blank');
            if (w) {
              w.document.write('<!doctype html><meta charset="utf-8"><title>Preview</title>');
              w.document.body.innerHTML = editor.getHTML();
              w.document.close();
            } else { alert('{% trans "Пожалуйста, разрешите всплывающие окна для предпросмотра" %}'); }
          } catch (e) { console.error(e); }
        });

        var form = textarea.closest('form');
        if (form) {
          form.addEventListener('submit', function () {
            try {
              var html = (editor && typeof editor.getHTML === 'function') ? editor.getHTML() : (editorContainer._current_html || '');
              var json = (editor && typeof editor.getJSON === 'function') ? editor.getJSON() : null;
              textarea.value = html || textarea.value;
              try { contentJson.value = JSON.stringify(json || {}); } catch (e) { contentJson.value = ''; }
            } catch (e) { console.error('Sync on submit failed', e); }
          }, { passive: true });
        }

      } catch (err) {
        console.error('initAdminTipTap error', err);
        try { var ta = qs('textarea[name="content"]'); if (ta) ta.style.display = ''; } catch (_) {}
      }
    };

    document.addEventListener('DOMContentLoaded', function () {
      try {
        if (typeof window.initAdminTipTap === 'function') {
          window.initAdminTipTap();
        } else {
          if (window.initAdminTipTap) try { window.initAdminTipTap(); } catch (e) { console.error(e); }
        }
      } catch (e) { console.error(e); }
    });

  })();
  </script>
{% endblock %}
