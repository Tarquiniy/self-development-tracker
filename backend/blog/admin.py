# backend/blog/admin.py
import os
import json
import logging
from django import forms
from django.contrib import admin
from django.contrib.admin.sites import AlreadyRegistered
from django.urls import reverse, path
from django.shortcuts import render, redirect
from django.http import JsonResponse, Http404
from django.utils import timezone
from django.views.decorators.http import require_http_methods, require_POST, require_GET
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.core import signing
from django.contrib.auth import get_user_model
from django.db.models.functions import TruncDate
from django.db.models import Count
from django.db import models
from django.utils.safestring import mark_safe
from django.utils.html import escape, format_html
from django.template.loader import render_to_string

logger = logging.getLogger(__name__)

# Optional reversion support
try:
    import reversion
    from reversion.admin import VersionAdmin
except Exception:
    reversion = None
    class VersionAdmin(admin.ModelAdmin):
        pass

# Import models
try:
    from .models import (
        Post, Category, Tag, Comment,
        PostReaction, PostView, PostAttachment, MediaLibrary, PostRevision
    )
except Exception as e:
    logger.exception("Could not import blog.models: %s", e)
    Post = Category = Tag = Comment = PostReaction = PostView = PostAttachment = MediaLibrary = PostRevision = None

CustomUser = get_user_model()
PREVIEW_SALT = "post-preview-salt"

# -----------------------
# Custom Admin Form with Enhanced UX
# -----------------------
class PostAdminForm(forms.ModelForm):
    class Meta:
        model = Post
        fields = '__all__'
        widgets = {
            'excerpt': forms.Textarea(attrs={'rows': 3, 'placeholder': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...'}),
            'meta_description': forms.Textarea(attrs={'rows': 2, 'placeholder': '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è SEO...'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Add CSS classes for styling; protect if fields absent
        if 'title' in self.fields:
            self.fields['title'].widget.attrs.update({
                'class': 'post-title-field',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞...'
            })
        if 'slug' in self.fields:
            self.fields['slug'].widget.attrs.update({
                'class': 'post-slug-field',
                'placeholder': 'url-slug...'
            })

# -----------------------
# Enhanced Admin Classes
# -----------------------
class BasePostAdmin(VersionAdmin):
    form = PostAdminForm
    change_form_template = 'admin/blog/post/change_form_fixed.html'

    # Modern list display
    list_display = ("title", "status_badge", "author", "published_at", "reading_time_display", "actions_column")
    list_filter = ("status", "published_at", "categories", "tags") if Post is not None else ()
    search_fields = ("title", "excerpt", "content", "meta_description")
    prepopulated_fields = {"slug": ("title",)} if Post is not None else {}
    date_hierarchy = "published_at"
    ordering = ("-published_at",)
    filter_horizontal = ("categories", "tags") if Post is not None else ()
    actions = ["make_published", "make_draft", "duplicate_post", "update_seo_meta"]

    # Enhanced fieldsets with better grouping
    fieldsets = (
        ("–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", {
            'fields': ('title', 'slug', 'content', 'excerpt'),
            'classes': ('main-content',)
        }),
        ("–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", {
            'fields': ('featured_image', 'og_image'),
            'classes': ('visual-elements', 'collapse')
        }),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", {
            'fields': ('categories', 'tags'),
            'classes': ('classification',)
        }),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", {
            'fields': ('author', 'status', 'published_at'),
            'classes': ('publication-settings',)
        }),
        ("SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('seo-settings', 'collapse')
        }),
    )

    def status_badge(self, obj):
        if not obj:
            return ""
        status_colors = {
            'draft': 'gray',
            'published': 'green',
            'archived': 'orange'
        }
        color = status_colors.get(getattr(obj, "status", None), 'gray')
        return format_html('<span class="status-badge status-{}">{}</span>', color, escape(getattr(obj, "get_status_display", lambda: "")()))
    status_badge.short_description = "–°—Ç–∞—Ç—É—Å"
    status_badge.admin_order_field = 'status'

    def reading_time_display(self, obj):
        if not obj:
            return "0 –º–∏–Ω"
        return f"{getattr(obj, 'reading_time', 0)} –º–∏–Ω"
    reading_time_display.short_description = "–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è"

    def actions_column(self, obj):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π:
         - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" (admin change) –µ—Å–ª–∏ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å URL
         - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π URL
        –í—Å—é —Ä–∞–±–æ—Ç—É —Å URL –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ª–æ–º–∞–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        """
        if not obj:
            return ""
        try:
            # –ü–æ–ª—É—á–∞–µ–º public URL —á–µ—Ä–µ–∑ get_absolute_url, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ slug –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            view_url = None
            try:
                slug = getattr(obj, "slug", None)
                if slug:
                    if hasattr(obj, "get_absolute_url") and callable(getattr(obj, "get_absolute_url")):
                        try:
                            u = obj.get_absolute_url()
                            if u:
                                view_url = u
                        except Exception:
                            view_url = None
            except Exception:
                view_url = None

            # –ü–æ–ª—É—á–∞–µ–º admin change URL
            edit_url = None
            try:
                edit_url = reverse("admin:blog_post_change", args=[getattr(obj, "pk", None)])
            except Exception:
                edit_url = None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            if view_url:
                view_btn = format_html(
                    '<a href="{}" target="_blank" class="button view-btn" title="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ">üëÅÔ∏è</a>',
                    view_url
                )
            else:
                view_btn = format_html('<span class="button view-btn disabled" title="–ù–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL">üëÅÔ∏è</span>')

            if edit_url:
                edit_btn = format_html(
                    '<a href="{}" class="button edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</a>',
                    edit_url
                )
            else:
                edit_btn = format_html('<span class="button edit-btn disabled" title="–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ">‚úèÔ∏è</span>')

            return format_html('<div class="action-buttons">{}&nbsp;{}</div>', view_btn, edit_btn)
        except Exception:
            # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ ‚Äî –Ω–µ –ª–æ–º–∞—Ç—å listing
            return ""

    actions_column.short_description = "–î–µ–π—Å—Ç–≤–∏—è"

    def make_published(self, request, queryset):
        updated = queryset.update(status="published", published_at=timezone.now())
        self.message_user(request, f"{updated} –ø–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    make_published.short_description = "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def make_draft(self, request, queryset):
        updated = queryset.update(status="draft")
        self.message_user(request, f"{updated} –ø–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.")
    make_draft.short_description = "üìù –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"

    def duplicate_post(self, request, queryset):
        created = 0
        for p in queryset:
            old_slug = getattr(p, "slug", "") or ""
            p.pk = None
            p.slug = f"{old_slug}-copy" if old_slug else ""
            p.title = f"{getattr(p, 'title', '')} (–∫–æ–ø–∏—è)"
            p.status = "draft"
            try:
                p.save()
                created += 1
            except Exception as e:
                logger.error("Error duplicating post: %s", e)
        self.message_user(request, f"–°–æ–∑–¥–∞–Ω–æ {created} –∫–æ–ø–∏–π.")
    duplicate_post.short_description = "üîÅ –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–∏"

    def update_seo_meta(self, request, queryset):
        updated = 0
        for post in queryset:
            if not getattr(post, "meta_title", None):
                post.meta_title = getattr(post, "title", "")
                try:
                    post.save()
                    updated += 1
                except Exception as e:
                    logger.error("Error updating SEO meta: %s", e)
        self.message_user(request, f"SEO –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {updated} –ø–æ—Å—Ç–æ–≤")
    update_seo_meta.short_description = "üîç –û–±–Ω–æ–≤–∏—Ç—å SEO –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ"


class CategoryAdmin(admin.ModelAdmin):
    list_display = ("title", "slug", "post_count", "created_at")
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ("title", "description")

    def post_count(self, obj):
        if not obj:
            return 0
        count = obj.posts.count() if hasattr(obj, 'posts') else 0
        return format_html('<span class="badge">{}</span>', count)
    post_count.short_description = "–ü–æ—Å—Ç–æ–≤"


class TagAdmin(admin.ModelAdmin):
    list_display = ("title", "slug", "post_count")
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ("title",)

    def post_count(self, obj):
        if not obj:
            return 0
        count = obj.posts.count() if hasattr(obj, 'posts') else 0
        return format_html('<span class="badge">{}</span>', count)
    post_count.short_description = "–ü–æ—Å—Ç–æ–≤"


class CommentAdmin(admin.ModelAdmin):
    list_display = ("author_name", "post_link", "short_content", "status_badges", "created_at")
    list_filter = ("is_public", "is_moderated", "created_at")
    search_fields = ("name", "email", "content")
    actions = ["approve_comments", "reject_comments"]

    def author_name(self, obj):
        if not obj:
            return "-"
        # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è user –∞—Ç—Ä–∏–±—É—Ç–∞
        try:
            if getattr(obj, "user", None):
                return getattr(obj, "user").get_full_name() if getattr(obj.user, "get_full_name", None) else getattr(obj.user, "username", f"User #{getattr(obj, 'user_id', '')}")
            return getattr(obj, "name", "") or "Anonymous"
        except Exception:
            return getattr(obj, "name", "") or "Anonymous"
    author_name.short_description = "–ê–≤—Ç–æ—Ä"

    def post_link(self, obj):
        try:
            if not obj or not getattr(obj, "post", None):
                return "-"
            url = reverse('admin:blog_post_change', args=[obj.post.id])
            return format_html('<a href="{}">{}</a>', url, escape(getattr(obj.post, "title", "‚Äî")))
        except Exception:
            return "-"
    post_link.short_description = "–ü–æ—Å—Ç"

    def short_content(self, obj):
        if not obj:
            return ""
        content = getattr(obj, "content", "") or ""
        short = content[:100]
        if len(content) > 100:
            short += "..."
        return short
    short_content.short_description = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"

    def status_badges(self, obj):
        if not obj:
            return ""
        badges = []
        if getattr(obj, "is_public", False):
            badges.append('<span class="badge badge-green">Public</span>')
        else:
            badges.append('<span class="badge badge-gray">Hidden</span>')
        if getattr(obj, "is_moderated", False):
            badges.append('<span class="badge badge-blue">Moderated</span>')
        return format_html(" ".join(badges))
    status_badges.short_description = "–°—Ç–∞—Ç—É—Å"

    def approve_comments(self, request, queryset):
        updated = queryset.update(is_public=True, is_moderated=True)
        self.message_user(request, f"{updated} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ.")
    approve_comments.short_description = "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def reject_comments(self, request, queryset):
        updated = queryset.update(is_public=False)
        self.message_user(request, f"{updated} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫—Ä—ã—Ç–æ.")
    reject_comments.short_description = "‚ùå –°–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"


# -----------------------
# Media Library Enhancements
# -----------------------
class MediaLibraryAdmin(admin.ModelAdmin):
    list_display = ("thumbnail", "title", "file_type", "uploaded_by", "uploaded_at_display", "post_link", "file_size")
    list_filter = ("uploaded", "uploaded_by")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ 'uploaded'
    search_fields = ("title", "file")
    readonly_fields = ("file_size", "file_type", "uploaded_at_display")  # –£–±—Ä–∞–ª–∏ uploaded_at, –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ

    def thumbnail(self, obj):
        if not obj or not getattr(obj, "file", None):
            return "üìÑ"
        try:
            if obj.file.name.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
                url = obj.file.url
                return format_html('<img src="{}" style="width: 50px; height: 50px; object-fit: cover;" />', url)
        except Exception:
            return "üñºÔ∏è"
        return "üìÑ"
    thumbnail.short_description = ""

    def file_type(self, obj):
        if not obj or not getattr(obj, "file", None):
            return "üìÑ"
        ext = os.path.splitext(obj.file.name)[1].lower()
        type_icons = {
            '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è', '.gif': 'üñºÔ∏è', '.webp': 'üñºÔ∏è',
            '.pdf': 'üìï', '.doc': 'üìò', '.docx': 'üìò',
            '.mp4': 'üé•', '.mov': 'üé•', '.avi': 'üé•',
        }
        return type_icons.get(ext, 'üìÑ')
    file_type.short_description = "–¢–∏–ø"

    def file_size(self, obj):
        try:
            if not obj or not getattr(obj, "file", None):
                return "N/A"
            size = obj.file.size
            for unit in ['B', 'KB', 'MB', 'GB']:
                if size < 1024.0:
                    return f"{size:.1f} {unit}"
                size /= 1024.0
            return f"{size:.1f} TB"
        except Exception:
            return "N/A"
    file_size.short_description = "–†–∞–∑–º–µ—Ä"

    def uploaded_at_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ uploaded_at –¥–ª—è readonly_fields"""
        if not obj:
            return ""
        return getattr(obj, "uploaded_at", "")
    uploaded_at_display.short_description = "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"

    def post_link(self, obj):
        if obj and getattr(obj, "post", None):
            try:
                url = reverse('admin:blog_post_change', args=[obj.post.id])
                return format_html('<a href="{}">{}</a>', url, escape(getattr(obj.post, "title", "‚Äî")))
            except Exception:
                return format_html('<span class="text-muted">–û—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∏</span>')
        return format_html('<span class="text-muted">–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω</span>')
    post_link.short_description = "–ü–æ—Å—Ç"


class PostRevisionAdmin(admin.ModelAdmin):
    list_display = ("post", "author", "created_at", "autosave")
    list_filter = ("created_at", "autosave")
    search_fields = ("post__title", "title", "content")
    readonly_fields = ("created_at",)

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False


# -----------------------
# Registration
# -----------------------
def register_admin_models(site_obj):
    """
    Register all admin models into provided admin site.
    """
    try:
        if Post is not None:
            site_obj.register(Post, BasePostAdmin)
        if Category is not None:
            site_obj.register(Category, CategoryAdmin)
        if Tag is not None:
            site_obj.register(Tag, TagAdmin)
        if Comment is not None:
            site_obj.register(Comment, CommentAdmin)
        if PostReaction is not None:
            site_obj.register(PostReaction)
        if PostView is not None:
            site_obj.register(PostView)
        if PostRevision is not None:
            site_obj.register(PostRevision, PostRevisionAdmin)

        if PostAttachment is not None:
            # –ï—Å–ª–∏ PostAttachment –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º MediaLibrary
            try:
                site_obj.register(MediaLibrary, MediaLibraryAdmin)
            except AlreadyRegistered:
                pass

    except Exception as e:
        logger.exception("Admin registration failed: %s", e)

    return True


# Auto-register with default admin site
try:
    if Post is not None:
        admin.site.register(Post, BasePostAdmin)
    if Category is not None:
        admin.site.register(Category, CategoryAdmin)
    if Tag is not None:
        admin.site.register(Tag, TagAdmin)
    if Comment is not None:
        admin.site.register(Comment, CommentAdmin)
    if MediaLibrary is not None:
        admin.site.register(MediaLibrary, MediaLibraryAdmin)
    if PostRevision is not None:
        admin.site.register(PostRevision, PostRevisionAdmin)
except AlreadyRegistered:
    pass
except Exception as e:
    logger.exception("Default admin registration failed: %s", e)
