import os
import logging
from importlib import import_module

from django import forms
from django.contrib import admin
from django.contrib.admin.sites import AlreadyRegistered
from django.urls import reverse
from django.shortcuts import render, redirect
from django.http import JsonResponse, Http404
from django.utils import timezone
from django.views.decorators.http import require_http_methods, require_POST, require_GET
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.core import signing
from django.core.exceptions import ImproperlyConfigured
from django.db.models.functions import TruncDate
from django.db.models import Count
from django.db import models
from django.utils.safestring import mark_safe
from django.utils.html import escape
from django.template.loader import render_to_string
from django.forms.models import modelform_factory

logger = logging.getLogger(__name__)

PREVIEW_SALT = "post-preview-salt"

# -----------------------
# Base (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–æ–¥–µ–ª–∏) Admin Form ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π ModelForm —á–µ—Ä–µ–∑ modelform_factory
# -----------------------
class PostAdminFormBase(forms.ModelForm):
    class Meta:
        # Model –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ modelform_factory –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        fields = '__all__'
        widgets = {
            'excerpt': forms.Textarea(attrs={'rows': 3, 'placeholder': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...'}),
            'meta_description': forms.Textarea(attrs={'rows': 2, 'placeholder': '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è SEO...'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if 'title' in self.fields:
            self.fields['title'].widget.attrs.update({
                'class': 'post-title-field',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞...'
            })
        if 'slug' in self.fields:
            self.fields['slug'].widget.attrs.update({
                'class': 'post-slug-field',
                'placeholder': 'url-slug...'
            })


# -----------------------
# Enhanced Admin Classes (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–º–ø–æ—Ä—Ç–∞)
# -----------------------
class BasePostAdmin(admin.ModelAdmin):
    # form –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    form = None
    change_form_template = 'admin/blog/post/change_form_fixed.html'

    list_display = ("title", "status_badge", "author", "published_at", "reading_time_display", "actions_column")
    list_filter = ()
    search_fields = ("title", "excerpt", "content", "meta_description")
    prepopulated_fields = {}
    date_hierarchy = "published_at"
    ordering = ("-published_at",)
    filter_horizontal = ()
    actions = ["make_published", "make_draft", "duplicate_post", "update_seo_meta"]

    fieldsets = (
        ("–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", {
            'fields': ('title', 'slug', 'content', 'excerpt'),
            'classes': ('main-content',)
        }),
        ("–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", {
            'fields': ('featured_image', 'og_image'),
            'classes': ('visual-elements', 'collapse')
        }),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", {
            'fields': ('categories', 'tags'),
            'classes': ('classification',)
        }),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", {
            'fields': ('author', 'status', 'published_at'),
            'classes': ('publication-settings',)
        }),
        ("SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('seo-settings', 'collapse')
        }),
    )

    def status_badge(self, obj):
        if not obj:
            return ""
        status_colors = {
            'draft': 'gray',
            'published': 'green',
            'archived': 'orange'
        }
        color = status_colors.get(getattr(obj, 'status', ''), 'gray')
        display = getattr(obj, "get_status_display", lambda: getattr(obj, "status", ""))()
        return mark_safe(f'<span class="status-badge status-{color}">{display}</span>')
    status_badge.short_description = "–°—Ç–∞—Ç—É—Å"
    status_badge.admin_order_field = 'status'

    def reading_time_display(self, obj):
        if not obj:
            return "0 –º–∏–Ω"
        return f"{getattr(obj, 'reading_time', 0)} –º–∏–Ω"
    reading_time_display.short_description = "–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è"

    def actions_column(self, obj):
        if not obj:
            return ""
        try:
            change_url = reverse('admin:blog_post_change', args=[obj.id])
        except Exception:
            # fallback: try admin lookup by actual app_label/model if possible
            try:
                change_url = reverse('admin:%s_%s_change' % (obj._meta.app_label, obj._meta.model_name), args=[obj.pk])
            except Exception:
                change_url = '#'
        try:
            view_url = getattr(obj, 'get_absolute_url', lambda: '#')()
        except Exception:
            view_url = '#'
        return mark_safe(f'''
            <div class="action-buttons">
                <a href="{change_url}" class="button edit-btn">‚úèÔ∏è</a>
                <a href="{view_url}" target="_blank" class="button view-btn">üëÅÔ∏è</a>
            </div>
        ''')
    actions_column.short_description = "–î–µ–π—Å—Ç–≤–∏—è"

    def make_published(self, request, queryset):
        updated = queryset.update(status="published", published_at=timezone.now())
        self.message_user(request, f"{updated} –ø–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    make_published.short_description = "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def make_draft(self, request, queryset):
        updated = queryset.update(status="draft")
        self.message_user(request, f"{updated} –ø–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.")
    make_draft.short_description = "üìù –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"

    def duplicate_post(self, request, queryset):
        created = 0
        for p in queryset:
            old_slug = getattr(p, "slug", "") or ""
            p.pk = None
            p.slug = f"{old_slug}-copy"
            p.title = f"{getattr(p, 'title', '')} (–∫–æ–ø–∏—è)"
            p.status = "draft"
            try:
                p.save()
                created += 1
            except Exception as e:
                logger.error("Error duplicating post: %s", e)
        self.message_user(request, f"–°–æ–∑–¥–∞–Ω–æ {created} –∫–æ–ø–∏–π.")
    duplicate_post.short_description = "üîÅ –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–∏"

    def update_seo_meta(self, request, queryset):
        updated = 0
        for post in queryset:
            if not getattr(post, 'meta_title', None):
                post.meta_title = getattr(post, 'title', '')
                try:
                    post.save()
                    updated += 1
                except Exception as e:
                    logger.error("Error updating SEO meta: %s", e)
        self.message_user(request, f"SEO –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {updated} –ø–æ—Å—Ç–æ–≤.")
    update_seo_meta.short_description = "üîç –û–±–Ω–æ–≤–∏—Ç—å SEO –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ"


class CategoryAdmin(admin.ModelAdmin):
    list_display = ("title", "slug", "post_count", "created_at")
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ("title", "description")

    def post_count(self, obj):
        if not obj:
            return 0
        count = getattr(obj, 'posts', None)
        try:
            return mark_safe(f'<span class="badge">{count.count() if count is not None else 0}</span>')
        except Exception:
            return mark_safe(f'<span class="badge">0</span>')
    post_count.short_description = "–ü–æ—Å—Ç–æ–≤"


class TagAdmin(admin.ModelAdmin):
    list_display = ("title", "slug", "post_count")
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ("title",)

    def post_count(self, obj):
        if not obj:
            return 0
        count = getattr(obj, 'posts', None)
        try:
            return mark_safe(f'<span class="badge">{count.count() if count is not None else 0}</span>')
        except Exception:
            return mark_safe(f'<span class="badge">0</span>')
    post_count.short_description = "–ü–æ—Å—Ç–æ–≤"


class CommentAdmin(admin.ModelAdmin):
    list_display = ("author_name", "post_link", "short_content", "status_badges", "created_at")
    list_filter = ("is_public", "is_moderated", "created_at")
    search_fields = ("name", "email", "content")
    actions = ["approve_comments", "reject_comments"]

    def author_name(self, obj):
        if not obj:
            return "-"
        try:
            return obj.name or (f"User #{obj.user_id}" if getattr(obj, 'user', None) else "Anonymous")
        except Exception:
            return "-"
    author_name.short_description = "–ê–≤—Ç–æ—Ä"

    def post_link(self, obj):
        try:
            if not obj or not getattr(obj, 'post', None):
                return "-"
            url = reverse('admin:blog_post_change', args=[obj.post.id])
            return mark_safe(f'<a href="{url}">{obj.post.title}</a>')
        except Exception:
            return "-"
    post_link.short_description = "–ü–æ—Å—Ç"

    def short_content(self, obj):
        if not obj:
            return ""
        content = getattr(obj, 'content', '') or ''
        short = content[:100]
        if len(content) > 100:
            short += "..."
        return short
    short_content.short_description = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"

    def status_badges(self, obj):
        if not obj:
            return ""
        badges = []
        try:
            if obj.is_public:
                badges.append('<span class="badge badge-green">Public</span>')
            else:
                badges.append('<span class="badge badge-gray">Hidden</span>')
            if obj.is_moderated:
                badges.append('<span class="badge badge-blue">Moderated</span>')
        except Exception:
            pass
        return mark_safe(" ".join(badges))
    status_badges.short_description = "–°—Ç–∞—Ç—É—Å"

    def approve_comments(self, request, queryset):
        updated = queryset.update(is_public=True, is_moderated=True)
        self.message_user(request, f"{updated} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ.")
    approve_comments.short_description = "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def reject_comments(self, request, queryset):
        updated = queryset.update(is_public=False)
        self.message_user(request, f"{updated} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫—Ä—ã—Ç–æ.")
    reject_comments.short_description = "‚ùå –°–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"


# -----------------------
# Media Library Enhancements
# -----------------------
class MediaLibraryAdmin(admin.ModelAdmin):
    list_display = ("thumbnail", "title", "file_type", "uploaded_by", "uploaded_at_display", "post_link", "file_size")
    list_filter = ("uploaded", "uploaded_by")
    search_fields = ("title", "file")
    readonly_fields = ("file_size", "file_type", "uploaded_at_display")

    def thumbnail(self, obj):
        if not obj or not getattr(obj, 'file', None):
            return "üìÑ"
        try:
            if obj.file.name.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
                url = obj.file.url
                return mark_safe(f'<img src="{url}" style="width: 50px; height: 50px; object-fit: cover;" />')
        except Exception:
            pass
        return "üìÑ"
    thumbnail.short_description = ""

    def file_type(self, obj):
        if not obj or not getattr(obj, 'file', None):
            return "üìÑ"
        try:
            ext = os.path.splitext(obj.file.name)[1].lower()
            type_icons = {
                '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è', '.gif': 'üñºÔ∏è', '.webp': 'üñºÔ∏è',
                '.pdf': 'üìï', '.doc': 'üìò', '.docx': 'üìò',
                '.mp4': 'üé•', '.mov': 'üé•', '.avi': 'üé•',
            }
            return type_icons.get(ext, 'üìÑ')
        except Exception:
            return 'üìÑ'
    file_type.short_description = "–¢–∏–ø"

    def file_size(self, obj):
        try:
            if not obj or not getattr(obj, 'file', None):
                return "N/A"
            size = obj.file.size
            for unit in ['B', 'KB', 'MB', 'GB']:
                if size < 1024.0:
                    return f"{size:.1f} {unit}"
                size /= 1024.0
            return f"{size:.1f} TB"
        except Exception:
            return "N/A"
    file_size.short_description = "–†–∞–∑–º–µ—Ä"

    def uploaded_at_display(self, obj):
        if not obj:
            return ""
        return getattr(obj, 'uploaded', None)
    uploaded_at_display.short_description = "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"

    def post_link(self, obj):
        try:
            if obj and getattr(obj, 'post', None):
                url = reverse('admin:blog_post_change', args=[obj.post.id])
                return mark_safe(f'<a href="{url}">{obj.post.title}</a>')
        except Exception:
            pass
        return mark_safe('<span class="text-muted">–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω</span>')
    post_link.short_description = "–ü–æ—Å—Ç"


class PostRevisionAdmin(admin.ModelAdmin):
    list_display = ("post", "author", "created_at", "autosave")
    list_filter = ("created_at", "autosave")
    search_fields = ("post__title", "title", "content")
    readonly_fields = ("created_at",)

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False


# -----------------------
# Registration (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è)
# -----------------------
def _make_proxy_for_model(model_cls, proxy_app_label='blog'):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–∫—Å–∏-–º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ admin, —á—Ç–æ–±—ã –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è URL –≤ —à–∞–±–ª–æ–Ω–∞—Ö
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, `blog_post_add`) –º–æ–≥–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ python-–ø–∞–∫–µ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None.
    """
    if model_cls is None:
        return None
    try:
        meta_dict = {
            'proxy': True,
            'app_label': proxy_app_label,
            'verbose_name': getattr(model_cls._meta, 'verbose_name', model_cls.__name__),
            'verbose_name_plural': getattr(model_cls._meta, 'verbose_name_plural', model_cls.__name__ + "s"),
        }
        Meta = type('Meta', (), meta_dict)
        proxy_name = f"{model_cls.__name__}Proxy"
        Proxy = type(proxy_name, (model_cls,), {'Meta': Meta, '__module__': model_cls.__module__})
        return Proxy
    except Exception as e:
        logger.exception("Could not create proxy for %s: %s", getattr(model_cls, '__name__', model_cls), e)
        return None


def register_admin_models(site_obj):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç admin –º–æ–¥–µ–ª–∏ ‚Äî –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å, –≤ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ AppConfig.ready() –≤—ã–∑–æ–≤–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏-–º–æ–¥–µ–ª–∏ —Å app_label='blog' —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NoReverseMatch –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤/–Ω–∞–∑–≤–∞–Ω–∏–π.
    """
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞.
        blog_models = None
        tried = []

        try:
            blog_models = import_module('backend.blog.models')
            tried.append('backend.blog.models')
        except Exception as e:
            tried.append(f'backend.blog.models failed: {e}')

        if blog_models is None:
            try:
                blog_models = import_module('blog.models')
                tried.append('blog.models')
            except Exception as e:
                tried.append(f'blog.models failed: {e}')

        if blog_models is None:
            logger.error("Could not import blog.models; tried: %s", tried)
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        Post = getattr(blog_models, 'Post', None)
        Category = getattr(blog_models, 'Category', None)
        Tag = getattr(blog_models, 'Tag', None)
        Comment = getattr(blog_models, 'Comment', None)
        PostReaction = getattr(blog_models, 'PostReaction', None)
        PostView = getattr(blog_models, 'PostView', None)
        PostAttachment = getattr(blog_models, 'PostAttachment', None)
        MediaLibrary = getattr(blog_models, 'MediaLibrary', None)
        PostRevision = getattr(blog_models, 'PostRevision', None)

        # –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–∫—Å–∏ —Å app_label='blog' –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –∞–¥–º–∏–Ω–∫–µ.
        # –≠—Ç–æ –¥–∞—ë—Ç URL-–∏–º–µ–Ω–∞ –≤–∏–¥–∞ 'blog_post_add' –∏ —Ç.–ø., –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏.
        # –ü—Ä–∏ —ç—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è.

        def _register(model_cls, admin_cls=None, proxy_app_label='blog', model_name=None):
            if model_cls is None:
                return
            try:
                Proxy = _make_proxy_for_model(model_cls, proxy_app_label=proxy_app_label)
                if Proxy is None:
                    # Fallback: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω
                    target = model_cls
                else:
                    target = Proxy

                # –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω admin_cls - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                try:
                    if admin_cls:
                        site_obj.register(target, admin_cls)
                    else:
                        site_obj.register(target)
                    logger.info("Registered admin for %s (proxy=%s).", getattr(model_cls, '__name__', model_cls), Proxy is not None)
                except AlreadyRegistered:
                    logger.debug("%s already registered", getattr(model_cls, '__name__', model_cls))
                except Exception as e:
                    # –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω), –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
                    logger.exception("Failed to register %s (%s). Attempting original model registration. Error: %s", model_cls, target, e)
                    try:
                        site_obj.register(model_cls, admin_cls) if admin_cls else site_obj.register(model_cls)
                    except AlreadyRegistered:
                        pass
                    except Exception as e2:
                        logger.exception("Fallback registration also failed for %s: %s", model_cls, e2)
            except Exception as e:
                logger.exception("Unexpected error registering model %s: %s", model_cls, e)

        # Post
        if Post is not None:
            try:
                PostForm = None
                try:
                    PostForm = modelform_factory(Post, form=PostAdminFormBase, fields='__all__')
                except Exception as e:
                    logger.exception("Could not build Post ModelForm dynamically: %s", e)
                    PostForm = None

                post_admin_attrs = {}
                if PostForm is not None:
                    post_admin_attrs['form'] = PostForm

                post_admin_attrs.setdefault('list_filter', ("status", "published_at", "categories", "tags"))
                post_admin_attrs.setdefault('prepopulated_fields', {"slug": ("title",)})
                post_admin_attrs.setdefault('filter_horizontal', ("categories", "tags"))

                PostAdmin = type('PostAdmin', (BasePostAdmin,), post_admin_attrs)
                _register(Post, PostAdmin, proxy_app_label='blog')
            except Exception as e:
                logger.exception("Failed to prepare/register Post admin: %s", e)

        # Category, Tag, Comment, PostRevision, MediaLibrary ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ admin-–∫–ª–∞—Å—Å–∞–º–∏
        if Category is not None:
            _register(Category, CategoryAdmin, proxy_app_label='blog')
        if Tag is not None:
            _register(Tag, TagAdmin, proxy_app_label='blog')
        if Comment is not None:
            _register(Comment, CommentAdmin, proxy_app_label='blog')
        if PostReaction is not None:
            _register(PostReaction, None, proxy_app_label='blog')
        if PostView is not None:
            _register(PostView, None, proxy_app_label='blog')
        if PostRevision is not None:
            _register(PostRevision, PostRevisionAdmin, proxy_app_label='blog')
        if PostAttachment is not None and MediaLibrary is not None:
            _register(MediaLibrary, MediaLibraryAdmin, proxy_app_label='blog')

        logger.info("Registered blog admin models into custom_admin_site via register_admin_models.")
        return True

    except Exception as e:
        logger.exception("Admin registration failed: %s", e)
        return False


# –ê–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç try/except)
try:
    register_admin_models(admin.site)
except Exception:
    # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–±–æ—Ä–∫–µ/–ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–π),
    # –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ–∑–∂–µ –ø—Ä–∏ runtime.
    logger.exception("Auto-registration of blog admin models failed during import.")
