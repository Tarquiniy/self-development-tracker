# backend/blog/admin.py
import logging
from importlib import import_module

from django import forms
from django.contrib import admin
from django.contrib.admin.sites import AlreadyRegistered
from django.urls import reverse
from django.utils import timezone
from django.utils.safestring import mark_safe
from django.forms.models import modelform_factory
from django.apps import apps

logger = logging.getLogger(__name__)

PREVIEW_SALT = "post-preview-salt"


# -----------------------
# Base (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–æ–¥–µ–ª–∏) Admin Form ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π ModelForm —á–µ—Ä–µ–∑ modelform_factory
# -----------------------
class PostAdminFormBase(forms.ModelForm):
    class Meta:
        # Model –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ modelform_factory –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        fields = "__all__"
        widgets = {
            "excerpt": forms.Textarea(attrs={"rows": 3, "placeholder": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞..."}),
            "meta_description": forms.Textarea(attrs={"rows": 2, "placeholder": "–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è SEO..."}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if "title" in self.fields:
            self.fields["title"].widget.attrs.update(
                {"class": "post-title-field", "placeholder": "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞..."}
            )
        if "slug" in self.fields:
            self.fields["slug"].widget.attrs.update({"class": "post-slug-field", "placeholder": "url-slug..."})


# -----------------------
# Enhanced Admin Classes (–Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ –∏–º–ø–æ—Ä—Ç–∞)
# -----------------------
class BasePostAdmin(admin.ModelAdmin):
    # form –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    form = None
    change_form_template = "admin/blog/post/change_form_fixed.html"

    list_display = (
        "title",
        "status_badge",
        "author",
        "published_at",
        "reading_time_display",
        "actions_column",
    )
    list_filter = ()
    search_fields = ("title", "excerpt", "content", "meta_description")
    prepopulated_fields = {}
    date_hierarchy = "published_at"
    ordering = ("-published_at",)
    filter_horizontal = ()
    actions = ["make_published", "make_draft", "duplicate_post", "update_seo_meta"]

    fieldsets = (
        ("–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", {"fields": ("title", "slug", "content", "excerpt"), "classes": ("main-content",)}),
        ("–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", {"fields": ("featured_image", "og_image"), "classes": ("visual-elements", "collapse")}),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", {"fields": ("categories", "tags"), "classes": ("classification",)}),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", {"fields": ("author", "status", "published_at"), "classes": ("publication-settings",)}),
        ("SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", {"fields": ("meta_title", "meta_description"), "classes": ("seo-settings", "collapse")}),
    )

    def status_badge(self, obj):
        if not obj:
            return ""
        status_colors = {"draft": "gray", "published": "green", "archived": "orange"}
        color = status_colors.get(getattr(obj, "status", ""), "gray")
        display = getattr(obj, "get_status_display", lambda: getattr(obj, "status", ""))()
        return mark_safe(f'<span class="status-badge status-{color}">{display}</span>')

    status_badge.short_description = "–°—Ç–∞—Ç—É—Å"
    status_badge.admin_order_field = "status"

    def reading_time_display(self, obj):
        if not obj:
            return "0 –º–∏–Ω"
        return f"{getattr(obj, 'reading_time', 0)} –º–∏–Ω"

    reading_time_display.short_description = "–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è"

    def actions_column(self, obj):
        if not obj:
            return ""
        try:
            change_url = reverse("admin:%s_%s_change" % (obj._meta.app_label, obj._meta.model_name), args=[obj.pk])
        except Exception:
            change_url = "#"
        view_url = getattr(obj, "get_absolute_url", lambda: "#")()
        return mark_safe(
            f'''
            <div class="action-buttons">
                <a href="{change_url}" class="button edit-btn">‚úèÔ∏è</a>
                <a href="{view_url}" target="_blank" class="button view-btn">üëÅÔ∏è</a>
            </div>
        '''
        )

    actions_column.short_description = "–î–µ–π—Å—Ç–≤–∏—è"

    def make_published(self, request, queryset):
        updated = queryset.update(status="published", published_at=timezone.now())
        self.message_user(request, f"{updated} –ø–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")

    make_published.short_description = "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def make_draft(self, request, queryset):
        updated = queryset.update(status="draft")
        self.message_user(request, f"{updated} –ø–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.")

    make_draft.short_description = "üìù –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"

    def duplicate_post(self, request, queryset):
        created = 0
        for p in queryset:
            old_slug = getattr(p, "slug", "") or ""
            p.pk = None
            p.slug = f"{old_slug}-copy"
            p.title = f"{getattr(p, 'title', '')} (–∫–æ–ø–∏—è)"
            p.status = "draft"
            try:
                p.save()
                created += 1
            except Exception as e:
                logger.error("Error duplicating post: %s", e)
        self.message_user(request, f"–°–æ–∑–¥–∞–Ω–æ {created} –∫–æ–ø–∏–π.")

    duplicate_post.short_description = "üîÅ –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–∏"

    def update_seo_meta(self, request, queryset):
        updated = 0
        for post in queryset:
            if not getattr(post, "meta_title", None):
                post.meta_title = getattr(post, "title", "")
                try:
                    post.save()
                    updated += 1
                except Exception as e:
                    logger.error("Error updating SEO meta: %s", e)
        self.message_user(request, f"SEO –º–µ—Ç–∞-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {updated} –ø–æ—Å—Ç–æ–≤.")

    update_seo_meta.short_description = "üîç –û–±–Ω–æ–≤–∏—Ç—å SEO –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ"


class CategoryAdmin(admin.ModelAdmin):
    list_display = ("title", "slug", "post_count", "created_at")
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ("title", "description")

    def post_count(self, obj):
        if not obj:
            return 0
        related_qs = getattr(obj, "posts", None)
        try:
            count = related_qs.count() if related_qs is not None else 0
            return mark_safe(f'<span class="badge">{count}</span>')
        except Exception:
            return mark_safe(f'<span class="badge">0</span>')

    post_count.short_description = "–ü–æ—Å—Ç–æ–≤"


class TagAdmin(admin.ModelAdmin):
    list_display = ("title", "slug", "post_count")
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ("title",)

    def post_count(self, obj):
        if not obj:
            return 0
        related_qs = getattr(obj, "posts", None)
        try:
            count = related_qs.count() if related_qs is not None else 0
            return mark_safe(f'<span class="badge">{count}</span>')
        except Exception:
            return mark_safe(f'<span class="badge">0</span>')

    post_count.short_description = "–ü–æ—Å—Ç–æ–≤"


class CommentAdmin(admin.ModelAdmin):
    list_display = ("author_name", "post_link", "short_content", "status_badges", "created_at")
    list_filter = ("is_public", "is_moderated", "created_at")
    search_fields = ("name", "email", "content")
    actions = ["approve_comments", "reject_comments"]

    def author_name(self, obj):
        if not obj:
            return "-"
        try:
            return obj.name or (f"User #{obj.user_id}" if getattr(obj, "user", None) else "Anonymous")
        except Exception:
            return "-"

    author_name.short_description = "–ê–≤—Ç–æ—Ä"

    def post_link(self, obj):
        try:
            if not obj or not getattr(obj, "post", None):
                return "-"
            url = reverse("admin:%s_%s_change" % (obj.post._meta.app_label, obj.post._meta.model_name), args=[obj.post.id])
            return mark_safe(f'<a href="{url}">{obj.post.title}</a>')
        except Exception:
            return "-"

    post_link.short_description = "–ü–æ—Å—Ç"

    def short_content(self, obj):
        if not obj:
            return ""
        content = getattr(obj, "content", "") or ""
        short = content[:100]
        if len(content) > 100:
            short += "..."
        return short

    short_content.short_description = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"

    def status_badges(self, obj):
        if not obj:
            return ""
        badges = []
        try:
            if obj.is_public:
                badges.append('<span class="badge badge-green">Public</span>')
            else:
                badges.append('<span class="badge badge-gray">Hidden</span>')
            if obj.is_moderated:
                badges.append('<span class="badge badge-blue">Moderated</span>')
        except Exception:
            pass
        return mark_safe(" ".join(badges))

    status_badges.short_description = "–°—Ç–∞—Ç—É—Å"

    def approve_comments(self, request, queryset):
        updated = queryset.update(is_public=True, is_moderated=True)
        self.message_user(request, f"{updated} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ.")

    approve_comments.short_description = "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def reject_comments(self, request, queryset):
        updated = queryset.update(is_public=False)
        self.message_user(request, f"{updated} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫—Ä—ã—Ç–æ.")

    reject_comments.short_description = "‚ùå –°–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"


# -----------------------
# Media Library Enhancements (–≥–∏–±–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
# -----------------------
class MediaLibraryAdmin(admin.ModelAdmin):
    list_display = ("thumbnail", "title", "file_type", "uploaded_by", "uploaded_at_display", "post_link", "file_size")
    list_filter = ()
    search_fields = ("title", "file")
    readonly_fields = ("file_size", "file_type", "uploaded_at_display")

    def thumbnail(self, obj):
        if not obj or not getattr(obj, "file", None):
            return "üìÑ"
        try:
            if obj.file.name.lower().endswith((".jpg", ".jpeg", ".png", ".gif", ".webp")):
                url = obj.file.url
                return mark_safe(f'<img src="{url}" style="width: 50px; height: 50px; object-fit: cover;" />')
        except Exception:
            pass
        return "üìÑ"

    thumbnail.short_description = ""

    def file_type(self, obj):
        if not obj or not getattr(obj, "file", None):
            return "üìÑ"
        try:
            import os
            ext = os.path.splitext(obj.file.name)[1].lower()
            type_icons = {
                ".jpg": "üñºÔ∏è",
                ".jpeg": "üñºÔ∏è",
                ".png": "üñºÔ∏è",
                ".gif": "üñºÔ∏è",
                ".webp": "üñºÔ∏è",
                ".pdf": "üìï",
                ".doc": "üìò",
                ".docx": "üìò",
                ".mp4": "üé•",
                ".mov": "üé•",
                ".avi": "üé•",
            }
            return type_icons.get(ext, "üìÑ")
        except Exception:
            return "üìÑ"

    file_type.short_description = "–¢–∏–ø"

    def file_size(self, obj):
        try:
            if not obj or not getattr(obj, "file", None):
                return "N/A"
            size = obj.file.size
            for unit in ["B", "KB", "MB", "GB"]:
                if size < 1024.0:
                    return f"{size:.1f} {unit}"
                size /= 1024.0
            return f"{size:.1f} TB"
        except Exception:
            return "N/A"

    file_size.short_description = "–†–∞–∑–º–µ—Ä"

    def uploaded_at_display(self, obj):
        if not obj:
            return ""
        # try both 'uploaded_at' and 'uploaded'
        return getattr(obj, "uploaded_at", getattr(obj, "uploaded", None))

    uploaded_at_display.short_description = "–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"

    def post_link(self, obj):
        try:
            if obj and getattr(obj, "post", None):
                url = reverse("admin:%s_%s_change" % (obj.post._meta.app_label, obj.post._meta.model_name), args=[obj.post.id])
                return mark_safe(f'<a href="{url}">{obj.post.title}</a>')
        except Exception:
            pass
        return mark_safe('<span class="text-muted">–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω</span>')

    post_link.short_description = "–ü–æ—Å—Ç"


class PostRevisionAdmin(admin.ModelAdmin):
    list_display = ("post", "author", "created_at", "autosave")
    list_filter = ("created_at", "autosave")
    search_fields = ("post__title", "title", "content")
    readonly_fields = ("created_at",)

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False


# -----------------------
# Registration (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è)
# -----------------------
def _model_exists(app_label: str, model_name: str):
    try:
        return apps.get_model(app_label, model_name)
    except LookupError:
        return None


def _is_registered(site_obj, model):
    return model in getattr(site_obj, "_registry", {})


def register_admin_models(site_obj=admin.site):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç admin –º–æ–¥–µ–ª–∏ ‚Äî –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ django.apps.apps.get_model,
    —á—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–º —Å–ø–æ—Å–æ–±–µ –∏–º–ø–æ—Ä—Ç–∞ (backend.blog vs blog).
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ register_blog_admin –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å BlogConfig.ready().
    """
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 'blog'
        Post = _model_exists("blog", "Post")
        Category = _model_exists("blog", "Category")
        Tag = _model_exists("blog", "Tag")
        Comment = _model_exists("blog", "Comment")
        PostReaction = _model_exists("blog", "PostReaction")
        PostView = _model_exists("blog", "PostView")
        PostAttachment = _model_exists("blog", "PostAttachment")
        MediaLibrary = _model_exists("blog", "MediaLibrary")
        PostRevision = _model_exists("blog", "PostRevision")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Post (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if Post is not None and not _is_registered(site_obj, Post):
            try:
                PostForm = None
                try:
                    PostForm = modelform_factory(Post, form=PostAdminFormBase, fields="__all__")
                except Exception:
                    logger.exception("Could not build Post ModelForm dynamically; using default form.")

                post_admin_attrs = {}
                if PostForm is not None:
                    post_admin_attrs["form"] = PostForm

                # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º list_filter / prepopulated_fields / filter_horizontal –µ—Å–ª–∏ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                lf = []
                if "status" in [f.name for f in Post._meta.get_fields()]:
                    lf.append("status")
                if "published_at" in [f.name for f in Post._meta.get_fields()]:
                    lf.append("published_at")
                if "categories" in [f.name for f in Post._meta.get_fields()]:
                    lf.append("categories")
                    post_admin_attrs.setdefault("filter_horizontal", ("categories",))
                if "tags" in [f.name for f in Post._meta.get_fields()]:
                    lf.append("tags")
                    post_admin_attrs.setdefault("filter_horizontal", ("tags",))
                if lf:
                    post_admin_attrs.setdefault("list_filter", tuple(lf))

                if "slug" in [f.name for f in Post._meta.get_fields()]:
                    post_admin_attrs.setdefault("prepopulated_fields", {"slug": ("title",)})

                PostAdmin = type("PostAdmin", (BasePostAdmin,), post_admin_attrs)
                site_obj.register(Post, PostAdmin)
                logger.info("Registered Post admin for %s.%s", Post._meta.app_label, Post._meta.model_name)
            except AlreadyRegistered:
                logger.info("Post already registered in admin; skipping.")
            except Exception as e:
                logger.exception("Failed to register Post admin: %s", e)

        # Register Category
        if Category is not None and not _is_registered(site_obj, Category):
            try:
                site_obj.register(Category, CategoryAdmin)
            except AlreadyRegistered:
                pass
            except Exception as e:
                logger.exception("Failed to register Category admin: %s", e)

        # Register Tag
        if Tag is not None and not _is_registered(site_obj, Tag):
            try:
                site_obj.register(Tag, TagAdmin)
            except AlreadyRegistered:
                pass
            except Exception as e:
                logger.exception("Failed to register Tag admin: %s", e)

        # Register Comment
        if Comment is not None and not _is_registered(site_obj, Comment):
            try:
                site_obj.register(Comment, CommentAdmin)
            except AlreadyRegistered:
                pass
            except Exception as e:
                logger.exception("Failed to register Comment admin: %s", e)

        # Register PostReaction
        if PostReaction is not None and not _is_registered(site_obj, PostReaction):
            try:
                site_obj.register(PostReaction)
            except AlreadyRegistered:
                pass
            except Exception as e:
                logger.exception("Failed to register PostReaction admin: %s", e)

        # Register PostView
        if PostView is not None and not _is_registered(site_obj, PostView):
            try:
                site_obj.register(PostView)
            except AlreadyRegistered:
                pass
            except Exception as e:
                logger.exception("Failed to register PostView admin: %s", e)

        # Register PostRevision
        if PostRevision is not None and not _is_registered(site_obj, PostRevision):
            try:
                site_obj.register(PostRevision, PostRevisionAdmin)
            except AlreadyRegistered:
                pass
            except Exception as e:
                logger.exception("Failed to register PostRevision admin: %s", e)

        # Register MediaLibrary / PostAttachment
        if MediaLibrary is not None and not _is_registered(site_obj, MediaLibrary):
            try:
                # –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º list_filter: –∏—â–µ–º –ø–æ–ª–µ uploaded_at –∏–ª–∏ uploaded
                ml_admin_attrs = {}
                ml_list_filter = []
                try:
                    fields = [f.name for f in MediaLibrary._meta.get_fields()]
                except Exception:
                    fields = []
                if "uploaded_at" in fields:
                    ml_list_filter.append("uploaded_at")
                elif "uploaded" in fields:
                    ml_list_filter.append("uploaded")
                if "uploaded_by" in fields:
                    ml_list_filter.append("uploaded_by")
                if ml_list_filter:
                    ml_admin_attrs["list_filter"] = tuple(ml_list_filter)

                MediaAdmin = type("MediaLibraryAdminDynamic", (MediaLibraryAdmin,), ml_admin_attrs)
                site_obj.register(MediaLibrary, MediaAdmin)
            except AlreadyRegistered:
                pass
            except Exception as e:
                logger.exception("Failed to register MediaLibrary admin: %s", e)

        logger.info("Registered blog admin models into site via register_admin_models.")
        return True
    except Exception as e:
        logger.exception("Admin registration failed: %s", e)
        return False


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–Ω–µ–µ –æ–∂–∏–¥–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º
register_blog_admin = register_admin_models
