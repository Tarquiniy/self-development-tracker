import logging
from django import forms
from django.contrib import admin
from django.contrib.admin.sites import AlreadyRegistered
from django.utils import timezone
from django.utils.safestring import mark_safe
from django.urls import reverse

logger = logging.getLogger(__name__)

# –ø–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
try:
    from .models import Post, Category, Tag, PostAttachment, MediaLibrary
except Exception as e:
    logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –±–ª–æ–≥–∞: %s", e)
    Post = Category = Tag = PostAttachment = MediaLibrary = None

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è reversion ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º VersionAdmin, –∏–Ω–∞—á–µ fallback
try:
    import reversion
    from reversion.admin import VersionAdmin
except Exception:
    class VersionAdmin(admin.ModelAdmin):
        pass

# –§–æ—Ä–º–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ - –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
class PostAdminForm(forms.ModelForm):
    class Meta:
        model = Post
        fields = '__all__' if Post is not None else ()
        widgets = {
            'excerpt': forms.Textarea(attrs={'rows': 3, 'placeholder': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...'}),
            'meta_description': forms.Textarea(attrs={'rows': 2, 'placeholder': '–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è SEO...'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if Post is None:
            return
        for fname in ('title', 'slug'):
            if fname in self.fields:
                self.fields[fname].widget.attrs.update({
                    'class': f'post-{fname}-field',
                    'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ...'
                })

# –£–ª—É—á—à—ë–Ω–Ω—ã–π –∞–¥–º–∏–Ω –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–æ–≤
class BasePostAdmin(VersionAdmin):
    form = PostAdminForm
    change_form_template = 'admin/blog/post/change_form_fixed.html'

    list_display = ("title", "status_badge", "author", "published_at", "reading_time_display", "actions_column")
    list_filter = ("status", "published_at", "categories", "tags") if Post is not None else ()
    search_fields = ("title", "excerpt", "content", "meta_description")
    prepopulated_fields = {"slug": ("title",)} if Post is not None else {}
    date_hierarchy = "published_at"
    ordering = ("-published_at",)
    filter_horizontal = ("categories", "tags") if Post is not None else ()
    actions = ["make_published", "make_draft"]

    fieldsets = (
        ("–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", {
            'fields': ('title', 'slug', 'content', 'excerpt'),
            'classes': ('main-content',)
        }),
        ("–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", {
            'fields': ('featured_image', 'og_image'),
            'classes': ('visual-elements', 'collapse')
        }),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", {
            'fields': ('categories', 'tags'),
            'classes': ('classification',)
        }),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", {
            'fields': ('author', 'status', 'published_at'),
            'classes': ('publication-settings',)
        }),
        ("SEO", {
            'fields': ('meta_title', 'meta_description'),
            'classes': ('seo-settings', 'collapse')
        }),
    )

    def status_badge(self, obj):
        if not obj:
            return ""
        colors = {'draft': 'gray', 'published': 'green', 'archived': 'orange'}
        color = colors.get(getattr(obj, 'status', ''), 'gray')
        label = getattr(obj, "get_status_display", lambda: (lambda: getattr(obj, "status", "")))()
        return mark_safe(f'<span class="status-badge status-{color}">{label}</span>')
    status_badge.short_description = "–°—Ç–∞—Ç—É—Å"
    status_badge.admin_order_field = 'status'

    def reading_time_display(self, obj):
        if not obj:
            return ""
        return f"{getattr(obj, 'reading_time', 0)} –º–∏–Ω"
    reading_time_display.short_description = "–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è"

    def actions_column(self, obj):
        if not obj:
            return ""
        view_url = getattr(obj, 'get_absolute_url', lambda: '#')()
        change_url = reverse('admin:blog_post_change', args=[obj.id]) if obj and getattr(obj, 'id', None) else '#'
        return mark_safe(f'''
            <div class="action-buttons">
                <a href="{change_url}" class="button edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</a>
                <a href="{view_url}" target="_blank" class="button view-btn" title="–û—Ç–∫—Ä—ã—Ç—å">üëÅÔ∏è</a>
            </div>
        ''')
    actions_column.short_description = "–î–µ–π—Å—Ç–≤–∏—è"

    def make_published(self, request, queryset):
        updated = queryset.update(status="published", published_at=timezone.now())
        self.message_user(request, f"{updated} –ø–æ—Å—Ç(–æ–≤) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    make_published.short_description = "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def make_draft(self, request, queryset):
        updated = queryset.update(status="draft")
        self.message_user(request, f"{updated} –ø–æ—Å—Ç(–æ–≤) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.")
    make_draft.short_description = "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"

    class Media:
        css = {'all': ('admin/admin-modern.css', 'admin/custom.css', 'admin/css/main.css')}
        js = ('admin/js/admin_dashboard.js', 'admin/js/custom_admin.js')

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å
if Post is not None:
    try:
        admin.site.register(Post, BasePostAdmin)
    except AlreadyRegistered:
        logger.info("Post —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∞–¥–º–∏–Ω–∫–µ")
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º MediaLibrary –µ—Å–ª–∏ –µ—Å—Ç—å
if MediaLibrary is not None:
    try:
        admin.site.register(MediaLibrary)
    except AlreadyRegistered:
        pass
